// Code generated by ent, DO NOT EDIT.

package ent

import (
	"db/ent/balance"
	"db/ent/schema"
	"db/ent/transaction"
	"db/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	balanceFields := schema.Balance{}.Fields()
	_ = balanceFields
	// balanceDescCurrency is the schema descriptor for currency field.
	balanceDescCurrency := balanceFields[2].Descriptor()
	// balance.CurrencyValidator is a validator for the "currency" field. It is called by the builders before save.
	balance.CurrencyValidator = balanceDescCurrency.Validators[0].(func(string) error)
	// balanceDescAmount is the schema descriptor for amount field.
	balanceDescAmount := balanceFields[3].Descriptor()
	// balance.DefaultAmount holds the default value on creation for the amount field.
	balance.DefaultAmount = balanceDescAmount.Default.(float64)
	// balanceDescCreatedAt is the schema descriptor for created_at field.
	balanceDescCreatedAt := balanceFields[4].Descriptor()
	// balance.DefaultCreatedAt holds the default value on creation for the created_at field.
	balance.DefaultCreatedAt = balanceDescCreatedAt.Default.(func() time.Time)
	// balanceDescUpdatedAt is the schema descriptor for updated_at field.
	balanceDescUpdatedAt := balanceFields[5].Descriptor()
	// balance.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	balance.DefaultUpdatedAt = balanceDescUpdatedAt.Default.(func() time.Time)
	// balance.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	balance.UpdateDefaultUpdatedAt = balanceDescUpdatedAt.UpdateDefault.(func() time.Time)
	transactionFields := schema.Transaction{}.Fields()
	_ = transactionFields
	// transactionDescCurrency is the schema descriptor for currency field.
	transactionDescCurrency := transactionFields[3].Descriptor()
	// transaction.DefaultCurrency holds the default value on creation for the currency field.
	transaction.DefaultCurrency = transactionDescCurrency.Default.(string)
	// transactionDescCreatedAt is the schema descriptor for created_at field.
	transactionDescCreatedAt := transactionFields[5].Descriptor()
	// transaction.DefaultCreatedAt holds the default value on creation for the created_at field.
	transaction.DefaultCreatedAt = transactionDescCreatedAt.Default.(func() time.Time)
	// transactionDescID is the schema descriptor for id field.
	transactionDescID := transactionFields[0].Descriptor()
	// transaction.IDValidator is a validator for the "id" field. It is called by the builders before save.
	transaction.IDValidator = transactionDescID.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[3].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
}
