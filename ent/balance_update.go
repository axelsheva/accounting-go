// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"accounting/ent/balance"
	"accounting/ent/predicate"
	"accounting/ent/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BalanceUpdate is the builder for updating Balance entities.
type BalanceUpdate struct {
	config
	hooks    []Hook
	mutation *BalanceMutation
}

// Where appends a list predicates to the BalanceUpdate builder.
func (bu *BalanceUpdate) Where(ps ...predicate.Balance) *BalanceUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUserID sets the "user_id" field.
func (bu *BalanceUpdate) SetUserID(i int) *BalanceUpdate {
	bu.mutation.SetUserID(i)
	return bu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (bu *BalanceUpdate) SetNillableUserID(i *int) *BalanceUpdate {
	if i != nil {
		bu.SetUserID(*i)
	}
	return bu
}

// SetCurrency sets the "currency" field.
func (bu *BalanceUpdate) SetCurrency(s string) *BalanceUpdate {
	bu.mutation.SetCurrency(s)
	return bu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (bu *BalanceUpdate) SetNillableCurrency(s *string) *BalanceUpdate {
	if s != nil {
		bu.SetCurrency(*s)
	}
	return bu
}

// SetAmount sets the "amount" field.
func (bu *BalanceUpdate) SetAmount(f float64) *BalanceUpdate {
	bu.mutation.ResetAmount()
	bu.mutation.SetAmount(f)
	return bu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bu *BalanceUpdate) SetNillableAmount(f *float64) *BalanceUpdate {
	if f != nil {
		bu.SetAmount(*f)
	}
	return bu
}

// AddAmount adds f to the "amount" field.
func (bu *BalanceUpdate) AddAmount(f float64) *BalanceUpdate {
	bu.mutation.AddAmount(f)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BalanceUpdate) SetUpdatedAt(t time.Time) *BalanceUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BalanceUpdate) SetUser(u *User) *BalanceUpdate {
	return bu.SetUserID(u.ID)
}

// Mutation returns the BalanceMutation object of the builder.
func (bu *BalanceUpdate) Mutation() *BalanceMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BalanceUpdate) ClearUser() *BalanceUpdate {
	bu.mutation.ClearUser()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BalanceUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BalanceUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BalanceUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BalanceUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BalanceUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := balance.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BalanceUpdate) check() error {
	if v, ok := bu.mutation.Currency(); ok {
		if err := balance.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Balance.currency": %w`, err)}
		}
	}
	if bu.mutation.UserCleared() && len(bu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Balance.user"`)
	}
	return nil
}

func (bu *BalanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(balance.Table, balance.Columns, sqlgraph.NewFieldSpec(balance.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Currency(); ok {
		_spec.SetField(balance.FieldCurrency, field.TypeString, value)
	}
	if value, ok := bu.mutation.Amount(); ok {
		_spec.SetField(balance.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedAmount(); ok {
		_spec.AddField(balance.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(balance.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   balance.UserTable,
			Columns: []string{balance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   balance.UserTable,
			Columns: []string{balance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{balance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BalanceUpdateOne is the builder for updating a single Balance entity.
type BalanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BalanceMutation
}

// SetUserID sets the "user_id" field.
func (buo *BalanceUpdateOne) SetUserID(i int) *BalanceUpdateOne {
	buo.mutation.SetUserID(i)
	return buo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (buo *BalanceUpdateOne) SetNillableUserID(i *int) *BalanceUpdateOne {
	if i != nil {
		buo.SetUserID(*i)
	}
	return buo
}

// SetCurrency sets the "currency" field.
func (buo *BalanceUpdateOne) SetCurrency(s string) *BalanceUpdateOne {
	buo.mutation.SetCurrency(s)
	return buo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (buo *BalanceUpdateOne) SetNillableCurrency(s *string) *BalanceUpdateOne {
	if s != nil {
		buo.SetCurrency(*s)
	}
	return buo
}

// SetAmount sets the "amount" field.
func (buo *BalanceUpdateOne) SetAmount(f float64) *BalanceUpdateOne {
	buo.mutation.ResetAmount()
	buo.mutation.SetAmount(f)
	return buo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (buo *BalanceUpdateOne) SetNillableAmount(f *float64) *BalanceUpdateOne {
	if f != nil {
		buo.SetAmount(*f)
	}
	return buo
}

// AddAmount adds f to the "amount" field.
func (buo *BalanceUpdateOne) AddAmount(f float64) *BalanceUpdateOne {
	buo.mutation.AddAmount(f)
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BalanceUpdateOne) SetUpdatedAt(t time.Time) *BalanceUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BalanceUpdateOne) SetUser(u *User) *BalanceUpdateOne {
	return buo.SetUserID(u.ID)
}

// Mutation returns the BalanceMutation object of the builder.
func (buo *BalanceUpdateOne) Mutation() *BalanceMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BalanceUpdateOne) ClearUser() *BalanceUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// Where appends a list predicates to the BalanceUpdate builder.
func (buo *BalanceUpdateOne) Where(ps ...predicate.Balance) *BalanceUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BalanceUpdateOne) Select(field string, fields ...string) *BalanceUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Balance entity.
func (buo *BalanceUpdateOne) Save(ctx context.Context) (*Balance, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BalanceUpdateOne) SaveX(ctx context.Context) *Balance {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BalanceUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BalanceUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BalanceUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := balance.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BalanceUpdateOne) check() error {
	if v, ok := buo.mutation.Currency(); ok {
		if err := balance.CurrencyValidator(v); err != nil {
			return &ValidationError{Name: "currency", err: fmt.Errorf(`ent: validator failed for field "Balance.currency": %w`, err)}
		}
	}
	if buo.mutation.UserCleared() && len(buo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Balance.user"`)
	}
	return nil
}

func (buo *BalanceUpdateOne) sqlSave(ctx context.Context) (_node *Balance, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(balance.Table, balance.Columns, sqlgraph.NewFieldSpec(balance.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Balance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, balance.FieldID)
		for _, f := range fields {
			if !balance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != balance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Currency(); ok {
		_spec.SetField(balance.FieldCurrency, field.TypeString, value)
	}
	if value, ok := buo.mutation.Amount(); ok {
		_spec.SetField(balance.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedAmount(); ok {
		_spec.AddField(balance.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(balance.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   balance.UserTable,
			Columns: []string{balance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   balance.UserTable,
			Columns: []string{balance.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Balance{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{balance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
